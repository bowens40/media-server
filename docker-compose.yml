version: "1"

services:       

# portainer

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    networks:
      - default
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    ports:
      - ${PORTAINER_PORT}:9000
    volumes:
      - ${CONFIG_DIR}/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock

# overseerr

  overseerr:
    container_name: overseerr
    image: lscr.io/linuxserver/overseerr:latest
    restart: unless-stopped
    networks:
      - default
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - LOG_LEVEL=debug
    ports:
      - ${OVERSEERR_PORT}:5055 # is this needed
    volumes:
      - ${CONFIG_DIR}/overseerr:/config
    links:
      - sonarr
      - radarr
      - plex

# prowlarr

  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr:latest
    restart: unless-stopped
    networks:
      - default
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_DIR}/prowlarr:/config
    ports:
      - ${PROWLARR_PORT}:9696

      
# sonarr

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    networks:
      - default
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_DIR}/sonarr:/config
      - ${DATA_DIR}:/data
    ports:
      - ${SONARR_PORT}:8989
      
# radarr

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    networks:
      - default
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    ports:
      - ${RADARR_PORT}:7878
    volumes:
      - ${CONFIG_DIR}/radarr:/config
      - ${DATA_DIR}:/data
      
# readarr 

  readarr:
    container_name: readarr
    image: linuxserver/readarr:develop
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    ports:
      - ${READARR_PORT}:8787
    volumes:
      - ${CONFIG_DIR}readarr:/config
      - ${DATA_DIR}:/data


# homarr

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    ports:
      - ${HOMARR_PORT}:7575
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/homarr:/config


# homepage

  homepage:
    container_name: homepage
    image: ghcr.io/gethomepage/homepage:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    ports:
      - ${HOMEPAGE_PORT}:3000
    volumes:
      - ${CONFIG_DIR}/homepage:/config
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations, see alternative methods
      
# qBitorrent

  qbittorrent:
    container_name: qbittorrent
    image: linuxserver/qbittorrent:latest
    restart: unless-stopped
    networks:
      - default
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=6881
    ports:
      - ${QBITTORRENT_WEBUI_PORT}:8080
      - ${QBITTORRENT_CONNECTION_PORT}:6881
      - ${QBITTORRENT_CONNECTION_PORT}:6881/udp
    volumes:
      - ${CONFIG_DIR}/qbittorrent:/config
      - ${DATA_DIR}/torrents:/data/torrents
    healthcheck:
      start_period: 15s

# Plex

  plex:
    container_name: plex
    image: lscr.io/linuxserver/plex:latest
    restart: unless-stopped
    networks:
      - default
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      - PLEX_CLAIM= #optional
    volumes:
      - ${CONFIG_DIR}/plex:/config
      - ${DATA_DIR}/media:/data/media
      
# Watchtower

  # watchtower:
  #   container_name: watchtower
  #   environment:
  #     REPO_PASS: ""
  #     REPO_USER: ""
  #     TZ: America/Vancouver
  #     WATCHTOWER_CLEANUP: "true"
  #     WATCHTOWER_INCLUDE_STOPPED: "false"
  #     WATCHTOWER_MONITOR_ONLY: "false"
  #     WATCHTOWER_NOTIFICATION_TEMPLATE: '{{range .}}{{.Message}}{{println}}{{end}}'
  #     WATCHTOWER_NOTIFICATION_URL: ""
  #     WATCHTOWER_NOTIFICATIONS: shoutrrr
  #     WATCHTOWER_NOTIFICATIONS_LEVEL: info
  #     WATCHTOWER_SCHEDULE: 0 0 4 * * *
  #     WATCHTOWER_TIMEOUT: 10s
  #   hostname: ubuntu-Macmini7-1
  #   image: ghcr.io/containrrr/watchtower:latest
  #   networks:
  #     default: null
  #   restart: unless-stopped
  #   volumes:
  #     - type: bind
  #       source: /etc/localtime
  #       target: /etc/localtime
  #       read_only: true
  #       bind:
  #         create_host_path: true
  #     - type: bind
  #       source: /media/ogidu/mediaserver/arrs #fix this
  #       target: /storage
  #       bind:
  #         create_host_path: true
  #     - /var/run/docker.sock:/var/run/docker.sock


